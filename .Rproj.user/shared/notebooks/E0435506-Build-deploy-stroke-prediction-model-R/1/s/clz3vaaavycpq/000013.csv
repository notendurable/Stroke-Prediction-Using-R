"0","# Train models"
"0","models <- list("
"0","  Logistic_Regression = workflow() %>%"
"0","    add_recipe(model_recipe) %>%"
"0","    add_model(log_spec) %>%"
"0","    fit(data = train_data),"
"0","  Random_Forest = workflow() %>%"
"0","    add_recipe(model_recipe) %>%"
"0","    add_model(rf_spec) %>%"
"0","    fit(data = train_data),"
"0","  Support_Vector_Machine = workflow() %>%"
"0","    add_recipe(model_recipe) %>%"
"0","    add_model(svm_spec) %>%"
"0","    fit(data = train_data),"
"0","  Decision_Tree = workflow() %>%"
"0","    add_recipe(model_recipe) %>%"
"0","    add_model(tree_spec) %>%"
"0","    fit(data = train_data),"
"0","  XGBoost = workflow() %>%"
"0","    add_recipe(model_recipe) %>%"
"0","    add_model(xgb_spec) %>%"
"0","    fit(data = train_data)"
"0",")"
"0",""
"0","# Updated Evaluation Function"
"0","evaluation_metrics <- function(model, test_data) {"
"0","  # Generate predictions"
"0","  predictions <- predict(model, test_data, type = ""prob"") %>%"
"0","    bind_cols(predict(model, test_data)) %>%"
"0","    bind_cols(test_data)"
"0","  "
"0","  # Ensure predictions include the necessary columns"
"0","  if (!all(c("".pred_class"", "".pred_Yes"") %in% colnames(predictions))) {"
"0","    stop(""Predictions do not include required columns."")"
"0","  }"
"0","  "
"0","  # Confusion Matrix"
"0","  conf_matrix <- tryCatch("
"0","    conf_mat(predictions, truth = stroke, estimate = .pred_class),"
"0","    error = function(e) {"
"0","      warning(""Error in creating confusion matrix: "", conditionMessage(e))"
"0","      NULL"
"0","    }"
"0","  )"
"0","  "
"0","  # Metrics: Accuracy, ROC AUC, Precision, Recall, F1-score"
"0","  metrics <- tryCatch("
"0","    {"
"0","      metrics(predictions, truth = stroke, estimate = .pred_class) %>%"
"0","        bind_rows("
"0","          roc_auc(predictions, truth = stroke, .pred_Yes),"
"0","          yardstick::precision(predictions, truth = stroke, estimate = .pred_class),"
"0","          yardstick::recall(predictions, truth = stroke, estimate = .pred_class),"
"0","          yardstick::f_meas(predictions, truth = stroke, estimate = .pred_class)"
"0","        )"
"0","    },"
"0","    error = function(e) {"
"0","      warning(""Error in calculating metrics: "", conditionMessage(e))"
"0","      NULL"
"0","    }"
"0","  )"
"0","  "
"0","  list("
"0","    metrics = metrics,"
"0","    confusion_matrix = conf_matrix"
"0","  )"
"0","}"
"0",""
"0","# Evaluate all models"
"0","results <- lapply(models, function(model) {"
"0","  tryCatch("
"0","    evaluation_metrics(model, test_data = test_data),"
"0","    error = function(e) {"
"0","      warning(""Error in model evaluation: "", conditionMessage(e))"
"0","      NULL"
"0","    }"
"0","  )"
"0","})"
"0","names(results) <- names(models)"
"0",""
"0","# Check for NULL entries in results"
"0","if (any(sapply(results, is.null))) {"
"0","  warning(""Some models failed during evaluation."")"
"0","}"
"0",""
"0","# Extract evaluation metrics"
"0","evaluation_results <- bind_rows("
"0","  lapply(results, function(x) if (!is.null(x)) x$metrics else NULL),"
"0","  .id = ""Model"""
"0",")"
"0",""
"0","# Extract confusion matrices"
"0","confusion_matrices <- lapply(results, function(x) if (!is.null(x)) x$confusion_matrix else NULL)"
"0",""
"0","# Check if confusion matrices were created successfully"
"0","if (any(sapply(confusion_matrices, is.null))) {"
"0","  warning(""Some confusion matrices could not be created."")"
"0","}"
